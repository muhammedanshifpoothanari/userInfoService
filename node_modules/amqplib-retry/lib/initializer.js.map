{"version":3,"sources":["../src/initializer.js"],"names":[],"mappings":"wpBAAA,GAAI,QAAS,QAAQ,UAAR,CAAb,CACA,GAAI,SAAU,QAAQ,UAAR,CAAd,C,GAEM,Y,YACJ,qBAAa,OAAb,CAAsB,eAAtB,CAAuC,gBAAvC,CAAyD,mCACvD,KAAK,OAAL,CAAe,OAAf,CACA,KAAK,eAAL,CAAuB,eAAvB,CACA,KAAK,gBAAL,CAAwB,gBACzB,C,uEAEa,CACZ,GAAM,MAAO,IAAb,CACA,MAAO,SACJ,GADI,CACA,UAAM,CACT,MAAO,SAAQ,GAAR,CAAY,CACjB,KAAK,OAAL,CAAa,WAAb,CAAyB,OAAO,cAAhC,CAAgD,CAC9C,QAAS,IADqC,CAE9C,UAAW,CACT,yBAA0B,OAAO,YADxB,CAET,4BAA6B,OAAO,aAF3B,CAFmC,CAAhD,CADiB,CAQjB,KAAK,OAAL,CAAa,WAAb,CAAyB,OAAO,cAAhC,CAAgD,CAAE,QAAS,IAAX,CAAhD,CARiB,CASjB,KAAK,OAAL,CAAa,UAAb,CAAwB,KAAK,eAA7B,CATiB,CAUjB,KAAK,OAAL,CAAa,UAAb,CAAwB,KAAK,gBAA7B,CAViB,CAWjB,KAAK,OAAL,CAAa,cAAb,CAA4B,OAAO,YAAnC,CAAiD,QAAjD,CAA2D,CAAE,QAAS,IAAX,CAA3D,CAXiB,CAAZ,CAaR,CAfI,EAgBJ,IAhBI,CAgBC,iBAAM,MAAK,OAAL,CAAa,SAAb,CAAuB,OAAO,cAA9B,CAA8C,OAAO,YAArD,CAAmE,OAAO,aAA1E,CAAN,CAhBD,EAiBJ,IAjBI,CAiBC,UAAM,CACV,KAAK,aAAL,CAAqB,IACtB,CAnBI,CAoBR,C,0BAGH,OAAO,OAAP,CAAiB,WAAjB","file":"initializer.js","sourcesContent":["var config = require('./config')\nvar Promise = require('bluebird')\n\nclass Initializer {\n  constructor (channel, clientQueueName, failureQueueName) {\n    this.channel = channel\n    this.clientQueueName = clientQueueName\n    this.failureQueueName = failureQueueName\n  }\n\n  initialize () {\n    const self = this\n    return Promise\n      .try(() => {\n        return Promise.all([\n          self.channel.assertQueue(config.delayQueueName, {\n            durable: true,\n            arguments: {\n              'x-dead-letter-exchange': config.exchangeName,\n              'x-dead-letter-routing-key': config.readyRouteKey\n            }\n          }),\n          self.channel.assertQueue(config.readyQueueName, { durable: true }),\n          self.channel.checkQueue(self.clientQueueName),\n          self.channel.checkQueue(self.failureQueueName),\n          self.channel.assertExchange(config.exchangeName, 'direct', { durable: true })\n        ])\n      })\n      .then(() => self.channel.bindQueue(config.readyQueueName, config.exchangeName, config.readyRouteKey))\n      .then(() => {\n        self.isInitialized = true\n      })\n  }\n}\n\nmodule.exports = Initializer\n"]}